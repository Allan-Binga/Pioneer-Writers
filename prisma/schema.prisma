// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username       String
  email          String   @unique
  phone_number   String? 
  password_hash  String? 
  oauth_provider String? 
  oauth_id       String? 
  avatar_url     String? 
  country        String? 
  state          String?

  // Relations
  orders   Order[]   @relation("UserOrders")
  payments Payment[]

  @@map("users")
}


model Writer {
  writer_id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name           String    @db.VarChar(100)
  email               String    @unique @db.VarChar(100)
  phone_number        String?   @db.VarChar(20)
  password_hash       String?
  country             String?   @db.VarChar(50)
  state               String?   @db.VarChar(50)
  bio                 String?
  profile_picture_url String?
  writer_level        String?   @db.VarChar(50)
  writer_type         String?   @db.VarChar(50)
  is_available        Boolean?  @default(true)
  rating              Decimal?  @db.Decimal(2, 1)
  completed_orders    Int?      @default(0)
  joined_at           DateTime? @default(now())
  primary_topic_field String?   @db.VarChar(50)

  // Relations
  orders Order[] @relation("WriterOrders")

  @@map("writers")
}

model Order {
  order_id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic_field       String    @db.VarChar(100)
  type_of_service   String    @db.VarChar(50)
  document_type     String    @db.VarChar(100)
  writer_level      String    @db.VarChar(20)
  paper_format      String    @db.VarChar(20)
  english_type      String    @db.VarChar(10)
  pages             Int       @db.SmallInt
  number_of_words   Int
  number_of_sources Int       @db.SmallInt
  topic             String
  instructions      String? 
  uploaded_file     String? 
  writer_type       String?   @default("Standard") @db.VarChar(20)
  deadline          DateTime
  writer_tip        Decimal?  @db.Decimal(6, 2)
  plagiarism_report Boolean?  @default(false)
  coupon_code       String?   @db.VarChar(30)
  total_price       Decimal   @db.Decimal(8, 2)
  order_status      String?   @default("Pending") @db.VarChar(20)
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  spacing           String? 
  checkout_amount   Decimal   @default(0.00) @db.Decimal(10, 2)
  payment_option    String? 
  user_id           String?   @db.Uuid
  writer_id         String?   @db.Uuid

  // Relations
  user     User?     @relation("UserOrders", fields: [user_id], references: [user_id])
  writer   Writer?   @relation("WriterOrders", fields: [writer_id], references: [writer_id])
  payments Payment[]
  messages Message[]

  @@map("orders")
}

model Payment {
  payment_id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id              String    @db.Uuid
  user_id               String?   @db.Uuid
  amount                Decimal   @db.Decimal(10, 2)
  payment_type          String    @db.VarChar(10)
  payment_status        String?   @default("completed") @db.VarChar(20)
  payment_method        String?   @db.VarChar(50)
  transaction_reference String?
  paid_at               DateTime? @default(now())
  created_at            DateTime? @default(now())
  updated_at            DateTime? @default(now())

  // Relations
  order Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  user  User? @relation(fields: [user_id], references: [user_id], onDelete: SetNull)

  @@map("payments")
}

model Message {
  message_id  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender_id   String    @db.Uuid
  receiver_id String    @db.Uuid
  sender_type String?   @db.VarChar(10) // 'client' or 'writer'
  content     String
  sent_at     DateTime? @default(now())
  is_read     Boolean?  @default(false)
  order_id    String?   @db.Uuid
  subject     String?
  is_archived Boolean?  @default(false)
  is_trashed  Boolean?  @default(false)

  // Relations
  order Order? @relation(fields: [order_id], references: [order_id])

  @@map("messages")
}

